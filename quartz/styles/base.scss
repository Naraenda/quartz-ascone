@use "./variables.scss" as *;
@use "./syntax.scss";
@use "./callouts.scss";

html {
  scroll-behavior: smooth;
  text-size-adjust: none;
  overflow-x: hidden;
  width: 100vw;
  background-color: rgb(47, 40, 40);
}

body,
section {
  margin: 0;
  max-width: 100%;
  box-sizing: border-box;
  font-family: var(--bodyFont);
  font-size: 10pt;
  color: black;
}

.text-highlight {
  background-color: #fff23688;
  padding: 0 0.1rem;
}

::selection {
  background: rgba(0, 0, 0, 0.15);
}

p,
ul,
text,
a,
tr,
td,
li,
ol,
ul,
.katex,
.math {
  color: black;
  fill: black;
  overflow-wrap: anywhere;
  hyphens: auto;
}

p,
ul,
text,
a,
li,
ol,
ul,
.katex,
.math {
  overflow-wrap: anywhere;
  /* tr and td removed from list of selectors for overflow-wrap, allowing them to use default 'normal' property value */
}

.math {
  &.math-display {
    text-align: center;
  }
}

strong {
  font-weight: $semiBoldWeight;
}

a {
  font-weight: $semiBoldWeight;
  text-decoration: none;
  transition: color 0.2s ease;
  color: dimgray;

  &:hover {
    color: darkslategray !important;
  }

  &.internal {
    text-decoration: none;
    background-color: rgba(0, 0, 0, 0.05);
    padding: 0 0.1rem;

    &:has(> img) {
      background-color: none;
      padding: 0;
    }
    &.tag-link {
      &::before {
        content: "#";
      }
    }
  }

  &.external .external-icon {
    height: 1ex;
    margin: 0 0.15em;

    > path {
      fill: black;
    }
  }
}

.desktop-only {
  display: initial;
  @media all and (max-width: $fullPageWidth) {
    display: none;
  }
}

.mobile-only {
  display: none;
  @media all and (max-width: $fullPageWidth) {
    display: initial;
  }
}

.page {
  @media all and (max-width: $fullPageWidth) {
    margin: 0 auto;
    padding: 0 1rem;
    max-width: $pageWidth;
  }

  & article {
    & > h1 {
      font-size: 2rem;
    }

    & li:has(> input[type="checkbox"]) {
      list-style-type: none;
      padding-left: 0;
    }

    & li:has(> input[type="checkbox"]:checked) {
      text-decoration: line-through;
      text-decoration-color: black;
      color: black;
    }

    & li > * {
      margin-top: 0;
      margin-bottom: 0;
    }

    p > strong {
      color: black;
    }
  }

  & > #quartz-body {
    width: 100%;
    display: flex;
    @media all and (max-width: $fullPageWidth) {
      flex-direction: column;
    }

    & .sidebar>*:not(.spacer) {
      margin-bottom: 1rem;
      padding: 1rem;
      box-sizing: content-box;
      background-color: khaki;
      box-shadow: 1rem 1rem rgba(0, 0, 0, 0.5), inset 0px 1em rgba(255, 255, 255, 0.5);
    }
  
    & .sidebar {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 2rem;
      top: 0;
      width: 300px;
      margin-top: $topSpacing;
      padding: 0 2rem;
      position: fixed;
      @media all and (max-width: $fullPageWidth) {
        position: initial;
        flex-direction: row;
        padding: 2rem;
        width: initial;
        margin-top: 2rem;
      }
    }

    & .sidebar.left {
      left: calc(calc(100vw - $pageWidth) / 2 - $sidePanelWidth);
      @media all and (max-width: $fullPageWidth) {
        gap: 0;
        align-items: center;
      }
    }

    & .sidebar.right {
      right: calc(calc(100vw - $pageWidth) / 2 - $sidePanelWidth);
      & > * {
        @media all and (max-width: $fullPageWidth) {
          flex: 1;
          min-width: 140px;
        }
      }
    }
  }

  & .page-header {
    width: $pageWidth;
    margin: $topSpacing auto 0 auto;
    @media all and (max-width: $fullPageWidth) {
      width: initial;
      margin-top: 2rem;
    }
  }

  & .center,
  & footer {
    box-sizing: border-box;
    margin-left: auto;
    margin-right: auto;
    width: $pageWidth;
    @media all and (max-width: $fullPageWidth) {
      width: initial;
      margin-left: 0;
      margin-right: 0;
    }
  }

  & .component-group,
  & nav,
  & footer,
  & .page-listing,
  & article {
    margin-top: 1rem;
    margin-bottom: 2rem;
    padding: 2rem 4rem;
    box-shadow: 1rem 1rem rgba(0, 0, 0, 0.5), inset 0px 1em rgba(255, 255, 255, 0.5);
    background-color: khaki;
    & :not(.popover > *) {
      box-shadow: none;
    }
    &:empty {
      display: none;
    }
  }

  & footer,
  & .component-group,
  & .nav {
    padding: 0.5rem 4rem !important;
  }
}

.footnotes {
  margin-top: 2rem;
}

input[type="checkbox"] {
  transform: translateY(2px);
  color: white;
  border: 1px solid black;
  background-color: white;
  position: relative;
  margin-inline-end: 0rem;
  margin-inline-start: -2rem;
  appearance: none;
  width: 1rem;
  height: 1rem;

  &:checked {
    border-color: black;
    background-color: white;

    &::after {
      content: "";
      position: absolute;
      left: 4px;
      top: 1px;
      width: 4px;
      height: 8px;
      display: block;
      border: solid black;
      border-width: 0 2px 2px 0;
      transform: rotate(45deg);
    }
  }
}

blockquote {
  margin: 1rem 0;
  border-left: 3px solid black;
  padding-left: 1rem;
  transition: border-color 0.2s ease;
}

h1,
h2,
h3,
h4,
h5,
h6,
thead {
  font-family: var(--headerFont);
  color: black;
  font-weight: revert;
  margin-bottom: 0;

  article > & > a[role="anchor"] {
    color: black;
    background-color: transparent;
  }
}

h1,
h2,
h3,
h4,
h5,
h6 {
  &[id] > a[href^="#"] {
    margin: 0 0.5rem;
    opacity: 0;
    transition: opacity 0.2s ease;
    transform: translateY(-0.1rem);
    font-family: var(--codeFont);
    user-select: none;
  }

  &[id]:hover > a {
    opacity: 1;
  }
}

// typography improvements
h1 {
  font-size: 1.75rem;
}

h2 {
  font-size: 1.4rem;
}

h3 {
  font-size: 1.12rem;
}

h4,
h5,
h6 {
  font-size: 1rem;
}

figure[data-rehype-pretty-code-figure] {
  margin: 0;
  position: relative;
  position: relative;

  & > [data-rehype-pretty-code-title] {
    font-family: var(--codeFont);
    font-size: 0.9rem;
    padding: 0.1rem 0.5rem;
    border: 1px solid black;
    width: max-content;
    margin-bottom: -0.5rem;
    color: black;
  }

  & > pre {
    padding: 0;
  }
}

pre {
  font-family: var(--codeFont);
  padding: 0 0.5rem;
  overflow-x: auto;
  position: relative;

  &:has(> code.mermaid) {
    border: none;
  }

  & > code {
    padding: 0;
    font-size: 0.85rem;
    counter-reset: line;
    counter-increment: line 0;
    display: grid;
    padding: 0.5rem 0;
    overflow-x: scroll;

    & [data-highlighted-chars] {
      background-color: var(--highlight);
    }

    & > [data-line] {
      padding: 0 0.25rem;
      box-sizing: border-box;
      border-left: 3px solid transparent;

      &[data-highlighted-line] {
        background-color: var(--highlight);
        border-left: 3px solid var(--secondary);
      }

      &::before {
        content: counter(line);
        counter-increment: line;
        width: 1rem;
        margin-right: 1rem;
        display: inline-block;
        text-align: right;
        color: rgba(115, 138, 148, 0.6);
      }
    }

    &[data-line-numbers-max-digits="2"] > [data-line]::before {
      width: 2rem;
    }

    &[data-line-numbers-max-digits="3"] > [data-line]::before {
      width: 3rem;
    }
  }
}

code {
  font-size: 0.9em;
  color: black;
  font-family: var(--codeFont);
  padding: 0.1rem 0.2rem;
  border: 1px dotted black;
}

tbody,
li,
p {
  line-height: 1.2em;
}

.table-container {
  overflow-x: auto;

  & > table {
    margin: 1rem;
    padding: 1.5rem;
    border-collapse: collapse;

    th,
    td {
      min-width: 75px;
    }

    & > * {
      line-height: 2rem;
    }
  }
}

th {
  text-align: left;
  padding: 0.4rem 0.7rem;
  border-bottom: 2px solid var(--gray);
}

td {
  padding: 0.2rem 0.7rem;
}

tr {
  border-bottom: 1px solid var(--lightgray);
  &:last-child {
    border-bottom: none;
  }
}

img {
  max-width: 100%;
  margin: 1rem 0;
}

p > img + em {
  display: block;
  transform: translateY(-1rem);
}

hr {
  width: 100%;
  margin: 2rem 0;
  height: 1px;
  border: none;
  background-color: black;
}

audio,
video {
  width: 100%;
}

.spacer {
  flex: 1 1 auto;
}

div:has(> .overflow) {
  position: relative;
}

ul.overflow,
ol.overflow {
  max-height: 400;
  overflow-y: auto;

  // clearfix
  content: "";
  clear: both;

  & > li:last-of-type {
    margin-bottom: 30px;
  }

  &:after {
    pointer-events: none;
    content: "";
    width: 100%;
    height: 50px;
    position: absolute;
    left: 0;
    bottom: 0;
    opacity: 1;
    transition: opacity 0.3s ease;
  }
}

.transclude {
  ul {
    padding-left: 1rem;
  }
}

.katex-display {
  overflow-x: auto;
  overflow-y: hidden;
}

.sticky-note-wrapper {
  margin: 0 auto;
  left: calc(50% - 90px - 1em);
  position: absolute;
  padding: 0;
  width: 0;
}

.sticky-note {
  position: absolute;
  background-color: powderblue;
  width: 180px;
  min-height: 180px;
  padding: 0 1em;
  box-shadow: 1em 1em rgba(0, 0, 0, 0.5), inset 0px 1em rgba(255, 255, 255, 0.5) !important;
  z-index: 1;

  &.red {
    background-color: salmon;
  }

  &.green {
    background-color: lightgreen;
  }

  &.blue {
    background-color: powderblue;
  }

  &.purple {
    background-color: mediumpurple;
  }
}

// CSS Houdini
// Using properties we can stack multiple types of transforms!
// But this is not in mainline firefox yet :(
// @property --mov-y {
//   syntax: '<length>';
//   initial-value: 0px;
//   inherits: false;
// }
// @property --rot-y {
//   syntax: '<angle>';
//   initial-value: 0deg;
//   inherits: false;
// }

:root {
  --mov-y: 0px;
  --rot-y: 0deg;
}

.ft- {

  @keyframes rainbow-animate {
      0% {
        background-position: 0px 0;
      }
      50% {
        background-position: 100px 0;
      }
      100% {
        background-position: 200px 0;
      }
    };

  @keyframes shake-animate {
    // CSS Houdini
    // 0% { --mov-y: 1px }
    // 100% { --mov-y: -1px }
    0% { transform: translateY(1px) }
    100% { transform: translateY(-1px) }
  };

  @keyframes spin-animate {
    // CSS Houdini
    // 0% { --rot-y: 0deg }
    // 100% { --rot-y: 360deg }
    0% { transform: rotateY(0deg) }
    100% { transform: rotateY(-360deg) }
  };

  @for $i from 0 through 10 {
    &char {
      animation-delay: 10ms;
    }
  }
  &letters {
    white-space: nowrap;
  }

  &letters span {
    white-space: pre;
  }

  &rainbow {
    background: repeating-linear-gradient(to right,#cb94ff 0px, #028ba1 20px, #4dc725 40px, #ff941a 60px, #d21b1b 80px, #cb94ff 100px);
    background-size: 100px;
    background-clip: text;
    color: transparent !important;
    & span, p {
      color: transparent;
    }
    animation: rainbow-animate 2s linear infinite;
  }

  &shake .char {
    animation: shake-animate 0.05s linear infinite alternate;
    display: inline-block;
    @for $i from 0 through 10 {
      &:nth-child(10n + #{$i}) {
        animation-delay: #{$i * -20ms};
      }
    }
  }

  &wave .char {
    animation: shake-animate 0.20s ease-in-out infinite alternate;
    display: inline-block;
    @for $i from 0 through 10 {
      &:nth-child(10n + #{$i}) {
        animation-delay: #{$i * -40ms};
      }
    }
  }

  &spin .char {
    animation: spin-animate 1.00s ease-in-out infinite;
    display: inline-block;
    @for $i from 0 through 10 {
      &:nth-child(10n + #{$i}) {
        animation-delay: #{$i * 40ms - 400ms};
      }
    }
  }

  // CSS Houdini
  // &letters .char {
  //   transform: translateY(var(--mov-y)) rotateY(var(--rot-y));
  // }
}
